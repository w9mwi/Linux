
51 lesser-known Linux commands:
https://www.tecmint.com/51-useful-lesser-known-commands-for-linux-users/?fbclid=IwAR1rwWAit-xyHllK7YN-Pwl_SGTKZ6yifgO4tsjmRrzos6dcHsMyV3TlVe8


Linux GIMP Image Editor
=======================
How to crop an image and save the selection...

1) Tools / Selection Tools / Rectangle Select
2) Image / Autocrop Image
3) File / Export  (Saves the image to a .png file.)


==================================================================================================
LINUX COMMANDS
==============


FIND COMMAND EXAMPLES
=====================
$ find -iname JSPWiki*
$ find . -name TestFile.txt	(Find a file named TestFile.txt in current and all sub-directories, case sensitive.)
$ find / -name TestFile.txt	(Find a file named TestFile.txt in the root (/) and all sub-directories, case sensitive.)
$ find . -iname \*.xml  (Finds all files ending in ".xml" in all sub-directories, case insensitive.)
$ find . -name .svn | xargs rm -r  (Remove all directories named .svn located in the current directory,
                                    AND all subdirectories.)
$ find /home -user exampleuser -mtime 7 -iname ".db"  (Find all .db files in the /home directory, modified in the
                                                       last 7 days by a user named exampleuser, case insensitive.)
  FIND OPTIONS:
  -iname  (Search without regard for text case.)
  -not    (Return only results that do not match the test case.)

$ find -type b  (Find a block type file.)
$ find -type c  (Find a character type file.)
$ find -type d  (Find a directory type file.)
$ find -type p  (Find a pipe type file.)
$ find -type b  (Find a regular type file.)
$ find -type l  (Find a symbolic link type file.)
$ find -type s  (Find a socket type file.)
  


GREP COMMAND EXAMPLES
=====================

Recursively search all files in the current directory AND child directories for the string '13.jpg' (case insensitive).
   -r = recursive
   -i = case insensitive
$ grep -ir '13.jpg' .
$ grep -ir '13.jpg' ./*xml
$ grep -r "mystery string" /home/junk  (-r searches all child directories recursively.)
$ grep -i "mystery string" /home/junk  (-i ignores case.)

The file /usr/share/dict/american-english contains approx. 99,000 words (lines).
Find all the words in that file that contain all vowels, in the order of a, e, i, o, u...
$ grep '.*a.*e.*i.*o.*u' /usr/share/dict/american-english


CHMOD COMMAND EXAMPLES
======================
The chmod command changes the access permissions of files and folders.

$ ll readme.txt
  -rw-rw-r-- 1 jsmith jsmith 0 Nov 13 14:07 readme.txt
$ chmod 777 readme.txt

The first 7 sets the USER permissions.
The second 7 sets the GROUP permissions.
The third 7 sets the permissions for everybody else.

7 = rwx = read, write, and execute
6 = rw- = read and write
5 = r-x = read and execute
4 = r-- = read-only
3 = -wx = write and execute
2 = -w- = write only
1 = --x = execute only
0 = --- = none

$ ll
  -rwxrwxrwx 1 jsmith jsmith 0 Nov 13 14:07 readme.txt*

The '1' in the following 'chmod 1777' command sets the 'sticky bit' of the
readme.txt file.  This means only the file owner, the directory owner, or
the root superuser can delete the file, regardless of the file's group
permissions.  Notice the last 3 'rwx' permission chars change to 'rwt'

$ chmod 1777 readme.txt
$ ll
  -rwxrwxrwt 1 jsmith jsmith 0 Nov 13 14:07 readme.txt*


CHOWN COMMAND EXAMPLES
======================
The chown command changes the user and/or group ownership
for given file or directory.  When you list a file, and the
following displays, 'jsmith' is the owner and 'programmer'
is the group.

$ ll readme.txt
  -rw-rw-r-- 1 jsmith programmer 0 Nov 13 14:07 readme.txt

$ chown owner-user filename
$ chown owner-user:owner-group filename
$ chown owner-user:owner-group directoryname
$ chown options owner-user:owner-group filename


TOUCH COMMAND EXAMPLES
======================
touch -t 8001031305 oldfile  #Changes the modification time/date of oldfile to 13:05 on January 3, 1980.


CDPARANOIA LINUX APPLICATION COMMAND EXAMPLES
=============================================
SEE --> http://www.linux-commands-examples.com/cdparanoia

Extract only the 3rd track of the CD to a file...
$ cdparanoia 3 /home/tbouril/DaveMason_3.flac

Extract tracks 1 through 3 of the CD to a file...
$ cdparanoia 1-3 /home/tbouril/DaveMason_1to3.flac

Extract the only the first track of the CD to a file...
$ cdparanoia -- -1 /home/tbouril/DaveMason_1.flac

Extract the first 2 tracks (songs) of the CD to a single file...
$ cdparanoia -- -2 /home/tbouril/DaveMason_2.flac

Visually display the data contents of the CD.  Use that information
to rip individual tracks from the CD to a file by running a command
similar to the one shown below in the next example.
$ cdparanoia -vsQ

Extract the following from the CD to a single file
FROM: Track 1 at 3:02.12
TO:   Track 2 at 4:30
$ cdparanoia "1[3:02.12]-2[4:30]" /home/tbouril/DaveMason_4.flac

=============================================================================================
=============================================================================================
In UNIX...

1) Everything is a file.  (Files, Processes, Devices, are files, 
2) Everything "running" (executing) is a process.
3) Every file is text or data.
4) File handles are files.
5) Shared memory is files.
6) Parents sacrifice their life to create children,
7) Zombies refuse to die.


The UNIX ls command shows...

$ echo $$  (Displays the current process ID of your shell.)
$ ls -la /proc/$$  (Displays the directory representing your shell process.)
$ cat /proc/cmdline  ("cmdline" represents a directory the /proc directory.)
$ ls -la /proc  (Displays all running processes.  Most are numbers, which are directories.)
$ ls -la /proc



