
51 lesser-known Linux commands:
https://www.tecmint.com/51-useful-lesser-known-commands-for-linux-users/?fbclid=IwAR1rwWAit-xyHllK7YN-Pwl_SGTKZ6yifgO4tsjmRrzos6dcHsMyV3TlVe8

Linux GIMP Image Editor
=======================
How to crop an image and save the selection.
--------------------------------------------
1) Tools / Selection Tools / Rectangle Select
2) Image / Autocrop Image
3) File / Export  (Saves the image to a .png file.)

How to convert a .xcf image into a different image, like jpeg, png, etc.
------------------------------------------------------------------------
1) Open the .xcf file.
2) From the menu, select: "File / Export As"
3) At the top of the file dialog screen that appears, enter the desired
   filename, including the filename's extension (.jpg, .png, etc.).
4) Near the lower-right of the file dialog screen, select the desired
   file type from the dropdown control.
5) Press the "Export" button.

==================================================================================================

LINUX COMMANDS
==============

ls OR ll COMMAND
====================
When you run the "ll" or "ls -la" command form the command-line
prompt, a list will appear similar to this:

total 268
-rw-rw-r--  1 tjb  tjb     49 Jan 25 15:19 test.txt
drwxrwxr-x  4 tjb  tjb   4096 Jan 25 15:24 Tom/

The "total 268" line designates that the directory (from
which you run the "ll command") takes up a total of 268
blocks of disk space.  Depending on the Linux distribution
and version, a block of disk space may be 512 bytes, 1024 bytes,
2,048 bytes, etc.  This number includes all files and all
directories, including child directories and child files.
The following two commands also reveal this information.

$ ls -as1  (Shows the number for each file and each directory, including files/directories beginning with the period ('.') character.)
$ ls -lh   (Shows the number for each file and each directory, NOT including files/directories beginning with the period ('.') character.)

The FIRST CHARACTER appearing on each line in the
list will be one of the following 8 characters:

1) -   A regular file.
2) d   A directory.
3) b   A block special file.
4) c   A character special file.
5) l   A symbolic link.
6) n   A network file.
7) p   A named pipe.
8) s   A socket.

The next 9 characters that appear in the list represent
the PERMISSIONS, and will be one of these 6 characters:

1) -  No permission.  (Nobody can read from, write to, or execute the file.)
2) r  Permission to read.
3) w  Permission to write.
4) x  Permission to execute.
5) s  The execution permission for the GROUP can be an 's'.  This can be set via
      the Linux "setgid" command.  When this is applied to a FILE, it means
      the FILE will be executed with the privileges of the owner’s group.  When
      used with a DIRECTORY, any files created inside the DIRECTORY will take
      their GROUP permissions from the DIRECTORY they’re being created in,
      and NOT from the user who creates the file.
6) t  The execution permission for the OTHER group can be a 't'.  This is the
      STICKY BIT which is usually applied to directories.  If this is set,
      regardless of the write and executable privileges that are set on the
      files in the directory, only the file owner, the directory owner, or
      the root user can rename or delete files in the directory.  See the
      "chmod" comand below for more details.

NOTE: For info about the "setgid" and "setuid" Linux commands see:
      https://en.wikipedia.org/wiki/Setuid

Of those 9 characters...
The first 3 characters designate permissions for the USER.
The middle 3 characters designate permissions for the GROUP.
The last 3 characters designate permissions for OTHER (all other users).

After the 9 permission characters a number appears in the list,
which represents the number of "hard links" (AKA, directories)
to that file or directory.  For a file this number will always
be 1.  For a directory this number will represent the number
of directories contained inside the directory PLUS 2.  Even
an empty directory will have a count of 2 because it includes
the "./" and the "../" entries in the list which exist in
all directories.

After the number of hard links, each list entry contains
the OWNER NAME, followed by the GROUP NAME.  In the list
shown above "tjb" designates the owner's name, followed
by "tjb" which designates the group's name.


Sort a file/directory list by its last-modified time--newest files at top.
$ ls -lt

Sort a file/directory list by its last-modified time--oldest files at top.
$ ls -latr

CHMOD COMMAND EXAMPLES
======================
The "chmod" command changes the access permissions of files and directories.

$ ll readme.txt
  -rw-rw-r-- 1 jsmith jsmith 0 Nov 13 14:07 readme.txt

Here's an example of how to use the "chmod" command:
$ chmod 777 readme.txt

The first 7 (7 = 111 binary) sets the USER permissions to read, write, and execute.
The second 7 (7 = 111 binary) sets the GROUP permissions to read, write, and execute.
The third 7 (7 = 111 binary) sets the OTHER (all other users) permissions to read, write, and execute.

7 = rwx = read, write, and execute
6 = rw- = read and write
5 = r-x = read and execute
4 = r-- = read-only
3 = -wx = write and execute
2 = -w- = write only
1 = --x = execute only
0 = --- = none

Assume we have a file named readme.txt that displays like this:
$ ll
  -rwxrwxrwx 1 jsmith jsmith 0 Nov 13 14:07 readme.txt*

In the following 'chmod 1777' command sets the STICKY BIT of the
readme.txt file via the 1 in 1777.  This means only the file owner,
the directory owner, or the root superuser can delete the file,
regardless of the file's group permissions.  Notice the last 3
'rwx' permission chars change from 'rwx' above to 'rwt' below.

$ chmod 1777 readme.txt
$ ll
  -rwxrwxrwt 1 jsmith jsmith 0 Nov 13 14:07 readme.txt*


CHOWN COMMAND EXAMPLES
======================
The chown command changes the user and/or group ownership
for given file or directory.  When you list a file, and the
following displays, 'jsmith' is the owner and 'programmer'
is the group.

$ ll readme.txt
  -rw-rw-r-- 1 jsmith programmer 0 Nov 13 14:07 readme.txt

$ chown owner-user filename
$ chown owner-user:owner-group filename
$ chown owner-user:owner-group directoryname
$ chown options owner-user:owner-group filename


HOW TO UNZIP A tar.gz FILE
==========================
Example file name is:  jdk-11.0.13_linux-x64_bin.tar.gz

$ tar -xvzf jdk-11.0.13_linux-x64_bin.tar.gz

HOW TO ZIP/UNZIP LINUX FILES
============================
$ zip Pop_Songs.zip *.mp3  (Zip all .mp3 files in the current directory into Pop_songs.zip file.)

$ unzip Pop_Songs.zip      (Unzip Pop_Songs.zip file into the current directory.)



HOW TO CREATE A PASSWORD FOR ROOT (SUPERUSER)
=============================================
Before you can use the "su -" command to become root
(superuser), you must change the root password.

1) From the command terminal run:
   $ sudo -i
   $ passwd            (Enter your password when prompted.)
   $ sudo passwd root  (Enter new root password when prompted.)
   
   
HOW TO BECOME ROOT (SUPERUSER)
==============================
1) From the command terminal run:
   $ su -  (Enter root password when prompted.)


CREATE A NEW USER AND SET USER'S PASSWORD
=========================================
1) First, login as superuser (or use "sudo" command).
2) Add a new user named "tjb" to the /home directory:
   $ useradd -m tjb
3) Set the "tjb" user's password:
   $ passwd tjb


CREATE A NEW GROUP
==================
To add a new group named "programmers" login
as superuser (su -) or use "sudo", like this:
1) sudo groupadd programmers

Next, add a user named "tjb" to the "programmers" group:
2) sudo usermod -aG programmers tjb

You also can add an entire folder/directory to a group.  The following
command makes the folder named 'DOCS' a member of the "programmers"
group.  The -R (recursive) flag makes all of DOCS child folders
AND child files a member of the "programmers" group.
3) sudo chown -R :programmers /DOCS

Now, any member of the "programmers" group will have the same permissions
(read/write/executable access) to the /DOCS folder, and all its child
files and folders.


DELETE/REMOVE A USER
====================
NOTE: -f  Forces the removal of the user account, even if the
          user is still logged in.  Also removes all files along
          with the home directory itself and the user’s mail spool.
      -r  Removes all files in the user's home directory, along
          with the home directory itself, and the user's mail spool.
          Files located in other file systems will have to be
          searched for and deleted manually.
1) First, login as superuser (or use "sudo" command).
2) $ userdel -r userName
   ...OR...
   $ userdel -r -f userName


FIND COMMAND EXAMPLES
=====================
SEE --> https://www.tecmint.com/35-practical-examples-of-linux-find-command

$ find -iname JSPWiki*
$ find . -name TestFile.txt	(Find a file named TestFile.txt in current and all sub-directories, case sensitive.)
$ find / -name TestFile.txt	(Find a file named TestFile.txt in the root (/) and all sub-directories, case sensitive.)
$ find . -iname \*.xml  (Finds all files ending in ".xml" in all sub-directories, case insensitive.)
$ find . -name .svn | xargs rm -r  (Remove all directories named .svn located in the current directory,
                                    AND all subdirectories.)
$ find /home -user exampleuser -mtime 7 -iname ".db"  (Find all .db files in the /home directory, modified in the
                                                       last 7 days by a user named exampleuser, case insensitive.)
  FIND OPTIONS:
  -iname  (Search without regard for text case.)
  -not    (Return only results that do not match the test case.)

$ find -type b  (Find a block type file.)
$ find -type c  (Find a character type file.)
$ find -type d  (Find a directory type file.)  EXAMPLE:  find / -type d -iname "purescript-master"
$ find -type p  (Find a pipe type file.)
$ find -type b  (Find a regular type file.)
$ find -type l  (Find a symbolic link type file.)
$ find -type s  (Find a socket type file.)

Count the number of files and directories contained in a single directory:
$ ls -1 | wc -l

Count ONLY files in a directory, and in all child directories:
$ find . -type f | wc -l

Count the number of directories in a directory, and all
child directories--includes the parent directory (..):
$ find . -type d | wc -l

Count ONLY files on your entire drive:
$ find / -type f | wc -l


GREP COMMAND EXAMPLES
=====================
SEE --> https://www.tecmint.com/12-practical-examples-of-linux-grep-command
SEE --> https://www.tecmint.com/linux-grep-commands-character-classes-bracket-expressions

Recursively search all files in the current directory AND child directories for the string '13.jpg' (case insensitive).
   -r = recursive
   -i = case insensitive
$ grep -ir '13.jpg' .
$ grep -ir '13.jpg' ./*xml
$ grep -r "mystery string" /home/junk  (-r searches all child directories recursively.)
$ grep -i "mystery string" /home/junk  (-i ignores case.)

The file /usr/share/dict/american-english contains approx. 99,000 words (lines).
Find all the words in that file that contain all vowels, in the order of a, e, i, o, u...
$ grep '.*a.*e.*i.*o.*u' /usr/share/dict/american-english


DISK USAGE
==========
$ df -h


PROCESSES
=========
$ top


TOUCH COMMAND EXAMPLES
======================
touch -t 8001031305 oldfile  #Changes the modification time/date of oldfile to 13:05 on January 3, 1980.


AUDIO - CONVERT .WAV FILES TO .MP3 FILES
========================================
ffmpeg -i track01.wav track01.mp3


AUDIO - CONVERT .WAV FILES TO .FLAC FILES
=========================================
sox  track_01.wav  track_01.flac


AUDIO - CDPARANOIA LINUX APPLICATION COMMAND EXAMPLES
=====================================================
SEE --> http://www.linux-commands-examples.com/cdparanoia

Extract only the 3rd track of the CD to a file...
$ cdparanoia 3 /home/tbouril/DaveMason_3.flac

Extract tracks 1 through 3 of the CD to a file...
$ cdparanoia 1-3 /home/tbouril/DaveMason_1to3.flac

Extract the only the first track of the CD to a file...
$ cdparanoia -- -1 /home/tbouril/DaveMason_1.flac

Extract the first 2 tracks (songs) of the CD to a single file...
$ cdparanoia -- -2 /home/tbouril/DaveMason_2.flac

Visually display the data contents of the CD.  Use that information
to rip individual tracks from the CD to a file by running a command
similar to the one shown below in the next example.
$ cdparanoia -vsQ

Extract the following from the CD to a single file
FROM: Track 1 at 3:02.12
TO:   Track 2 at 4:30
$ cdparanoia "1[3:02.12]-2[4:30]" /home/tbouril/DaveMason_4.flac

=============================================================================================

In UNIX...

1) Everything is a file.  (Files, Processes, Devices are files.)
2) Everything "running" (executing) is a process.
3) A Daemon in Linux is a program/process that runs silently in the
   background to monitor and take care of certain services required
   by the operating system.  The term was coined by MIT researchers
   who used the term “daemon” as a reference to Maxwell’s demon, an
   imaginary being that constantly works in the background sorting molecules.
4) Every file is either text or data.
5) "File handles" are files.
6) "Shared memory" is files.
7) Parents sacrifice their life to create children.
8) Zombies refuse to die.

The UNIX ls command shows...
$ echo $$  (Displays the current process ID of your shell.)
$ ls -la /proc/$$  (Displays the directory representing your shell process.)
$ cat /proc/cmdline  ("cmdline" represents a directory the /proc directory.)
$ ls -la /proc  (Displays all running processes.  Most are numbers, which are directories.)
$ ls -la /proc
